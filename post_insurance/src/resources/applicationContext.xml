<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"
	default-lazy-init="false"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task.xsd">

	<description>Spring env</description>
	<context:property-placeholder location="classpath:/jdbc.properties,classpath:/shiro.properties,classpath:/druid.mysql" />

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.gdpost">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 在applicationContext.xml中进行配置，使用定时器
        ref : pojo类的名称
        method : 调用的方式名称
        cron : cronExpression表达式
        cron="0/5 * * * * ?"  //表示五秒钟执行一次
     -->
     <task:scheduler id="myScheduler" pool-size="3"/>
     
    <task:scheduled-tasks scheduler="myScheduler">
        <task:scheduled ref="taskService" method="updateDB" cron="0 44 23 * * ?"/>
        <task:scheduled ref="taskInNightService" method="updateDBInNight" cron="0 40 23 * * ?"/>
        <task:scheduled ref="taskInNightService" method="updateCTInfo" cron="0 0 23 * * ?"/>
    </task:scheduled-tasks>
	
	<!-- Spring Data Jpa配置 , 扫描base-package下所有继承于Repository<T,ID>的接口-->
 	<jpa:repositories base-package="com.gdpost"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="dataSource">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.gdpost"/>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.current_session_context_class·">thread</prop>
				<prop key="hibernate.id.new_generator_mappings">false</prop>
				<!-- 抓取策略 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<prop key="hibernate.default_batch_fetch_size">4</prop>
				<prop key="hibernate.jdbc.fetch_size">30</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				
				<!-- 缓存org.hibernate.cache.ehcache.internal.EhcacheRegionFactory   -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
				
				<!-- 建表的命名规则 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>

				<!-- 用于调试的属性 -->
				<!--
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop> 
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				-->
				<prop key="hibernate.format_sql">true</prop>
				
				<prop key="hibernate.show_sql">true</prop>
				
				<!-- end 用于调试的属性 -->			
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
		lazy-init="false" primary="false">
		<property name="databasePlatform" value="${hibernate.dialect}"/>
	</bean>

	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
	<!-- production环境 -->
 	<beans profile="production">
 	
		<!-- 数据源配置, 使用druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${druid.user}" />
			<property name="password" value="${druid.password}" />
			<property name="initialSize" value="${druid.initialSize}" />
			<property name="minIdle" value="${druid.minIdle}" />
			<property name="maxActive" value="${druid.maxActive}" />
			<property name="maxWait" value="${druid.maxWait}" />
			<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
			<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
			<property name="validationQuery" value="${druid.validationQuery}" />
			<property name="testWhileIdle" value="${druid.testWhileIdle}" />
			<property name="testOnBorrow" value="true" />
			<property name="testOnReturn" value="false" />
			<property name="poolPreparedStatements" value="true" />
			<!-- close for mysql 
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
			 -->
			<property name="filters" value="config" />
	      	<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${druid.publickey}" />
		</bean>
		
	</beans>

</beans>